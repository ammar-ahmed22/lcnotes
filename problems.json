{
    "two-sum": {
        "id": "two-sum",
        "title": "1. Two Sum",
        "directory": "1-two-sum",
        "difficulty": "Easy",
        "tags": [
            "hashmap",
            "math"
        ],
        "notes": "- **Intuition**: To find a valid answer we simply need to find if the complement (`target - curr`) exists in the array\n- **Implementation**: Use a hashmap to store numbers with their indices (allow overwrites because duplicates are not allowed), check if the complement exists in the map and is not the same number, return\n- **Edge-cases**: Ensure that you check the indices are not the same when returning (i.e. `map[complement] != i`)\n",
        "published": true
    },
    "contains-duplicate": {
        "id": "contains-duplicate",
        "title": "217. Contains Duplicate",
        "directory": "217-contains-duplicate",
        "difficulty": "Easy",
        "tags": [
            "hashmap"
        ],
        "notes": "- **Intuition**: Need to check if a given number exists in the array\n- **Implementation**: Use a hashmap, check if the current number is in the map, return True if found, otherwise add to map, return False at the end of loop (no duplicates found)\n",
        "published": true
    },
    "valid-anagram": {
        "id": "valid-anagram",
        "title": "242. Valid Anagram",
        "directory": "242-valid-anagram",
        "difficulty": "Easy",
        "tags": [
            "hashmap",
            "frequency"
        ],
        "notes": "- **Intuition**: An anagram means the strings have the same frequency of letters, i.e. abc is anagram of bac or cab, etc.\n- **Implementation**: Since only lowercase alphabet, increment in 26 value array at each character index (i.e. a = index 0, b = index 1, etc.) for `s` and decrement for `t`, if frequency array is zero, return True, otherwise False\n",
        "published": true
    },
    "group-anagrams": {
        "id": "group-anagrams",
        "title": "49. Group Anagrams",
        "directory": "49-group-anagrams",
        "difficulty": "Medium",
        "tags": [
            "hashmap",
            "frequency"
        ],
        "notes": "- **Intuition**: Every \"group\" of anagrams will have the same frequency table (26 value array)\n- **Implementation**: Use a hashmap with the key being the frequency table and the value being the group of strings, iterate over each string, create the frequency table, check the map, add or create new entry in the map, finally take all the values from the map and flatten into a single result\n- **Edge-cases**: Python doesn't allow arbitrary values as keys, convert frequency table to comma-separated string\n",
        "published": true
    },
    "top-k-frequent-elements": {
        "id": "top-k-frequent-elements",
        "title": "347. Top K Frequent Elements",
        "directory": "347-top-k-frequent-elements",
        "difficulty": "Medium",
        "tags": [
            "hashmap",
            "frequency"
        ],
        "notes": "- **Intuition**: We can use an array that maps index to frequency (i.e. freq[1] = 2 means 2 has a frequency of 1), allowing us to formulate the answer in `O(n)` time\n- **Implementation**: Use a hashmap to count frequencies, iterate over hashmap and create our frequency array (length `n + 1`, 1-based indexing), iterate backwards over frequency array to create result\n- **Edge-cases**: Multiple elements can have the same frequency so frequency array should be an array of arrays, when iterating backwards go into arrays if needed\n",
        "published": true
    },
    "product-of-array-except-self": {
        "id": "product-of-array-except-self",
        "title": "238. Product of Array Except Self",
        "directory": "238-product-of-array-except-self",
        "difficulty": "Medium",
        "tags": [
            "math"
        ],
        "notes": "- **Intuition**: Use `prefix` and `suffix` arrays to calculate answer at each index. `prefix` is the product of all elements before `i` and `suffix` is the product of all elements after `i`.\n- **Implementation**: Initialize `prefix` with `1` (before `i = 0` is just 1), iterate from `1 to n`, `prefix[i] = nums[i - 1] * prefix[i - 1]`. Initialize `suffix` with `suffix[-1] = 1` (after the end of the array, just 1 left), iterate backwards `n-2 to 0`, `suffix[i] = nums[i + 1] * suffix[i + 1]`. Answer is `ans[i] = prefix[i] * suffix[i]`\n",
        "published": true
    },
    "valid-sudoku": {
        "id": "valid-sudoku",
        "title": "36. Valid Sudoku",
        "directory": "36-valid-sudoku",
        "difficulty": "Medium",
        "tags": [
            "matrix"
        ],
        "notes": "- **Intuition**: Check each row, column and 3x3 subbox for duplicates essentially\n- **Implementation**: Use a hashmap to check for duplicates in each row, column and 3x3 subbox\n- **Edge-cases**: Figuring out the indexing of the 3x3 subbox is difficult. Do 4 nested loops, `box_row (0 to 3)`, `box_col (0 to 3)`, `row (0 to 3)`, `col (0 to 3)`, then we can access the specific value with `board[3 * box_row + row][3  * box_col + col]`\n",
        "published": true
    },
    "longest-consecutive-sequence": {
        "id": "longest-consecutive-sequence",
        "title": "128. Longest Consecutive Sequence",
        "directory": "128-longest-consecutive-sequence",
        "difficulty": "Medium",
        "tags": [
            "hashmap",
            "math"
        ],
        "notes": "- **Intuition**: The start of a sequence is when there IS a number exactly 1 greater than it in the array and NOT a number exactly 1 less than it. When a sequence start is found, iterate looking for the next values, keeping track of the max length\n- **Implementation**: Use hashmap to store all numbers for `O(1)` lookup, iterate and look for sequence start, iterate building the sequence and keep track of max\n- **Edge-cases**: In case of duplicates, we don't process the same sequence start multiple times. Initialize hashmap with all `False` values, when processing a sequence start, mark it as `True` to signify this sequence start is already processed and don't process that sequence start again\n",
        "published": true
    },
    "valid-palindrome": {
        "id": "valid-palindrome",
        "title": "125. Valid Palindrome",
        "directory": "125-valid-palindrome",
        "difficulty": "Easy",
        "tags": [
            "two-pointers",
            "strings"
        ],
        "notes": "- **Intuition**: Palindrome will have the same characters on the left and right side of the string when traversing at the same speed\n- **Implementation**: Use right and left pointers, iterate towards the center, check if `l == r`, if not, early return `False`. Otherwise return `True`.\n- **Edge-cases**: Can have non-alphanumeric or uppercase characters, make everything lowercase, skip over non-alphanumerics\n",
        "published": true
    },
    "two-sum-ii-input-array-is-sorted": {
        "id": "two-sum-ii-input-array-is-sorted",
        "title": "167. Two Sum II - Input Array Is Sorted",
        "directory": "167-two-sum-ii-input-array-is-sorted",
        "difficulty": "Medium",
        "tags": [
            "two-pointers",
            "binary-search"
        ],
        "notes": "- **Intuition**: Since array is sorted, we only need to look for our complment (`target - curr`) in the values to the right of the current (also sorted, binary search)\n- **Implementation**: For each number, calculate the complement, conduct binary search on the elements to the right of it, if not found keep going, if found return\n\n",
        "published": true
    },
    "3sum": {
        "id": "3sum",
        "title": "15. 3Sum",
        "directory": "15-3sum",
        "difficulty": "Medium",
        "tags": [
            "binary-search",
            "two-pointers"
        ],
        "notes": "- **Intuition**: Use a similar approach to [Two Sum II - Input Array Sorted](../167-two-sum-ii-input-array-is-sorted/solution.py), sort the input, look for when left and right of the right side of the array add up to the current number\n- **Implementation**: Sort the input `O(n log n)`, for each number, binary search on the right side of the array, if `l + r = curr`, triplet found, add to result, move right if `l + r` is too big, otherwise move left\n- **Edge-cases**: Ensure that we keep going even after finding a triplet because there could be more with the same `curr`. Also ensure that we move past duplicates for `curr` because it will be the same result, i.e. if we have [-1, -1, -1, 0, 1], we want to start processing at the last -1. Same thing when we find an answer, we want to move left and right until they are at the next non-duplicate\n",
        "published": true
    },
    "container-with-most-water": {
        "id": "container-with-most-water",
        "title": "11. Container With Most Water",
        "directory": "11-container-with-most-water",
        "difficulty": "Medium",
        "tags": [
            "two-pointers",
            "math"
        ],
        "notes": "- **Intuition**: We want to maximize height and width. Start with max width and always reduce the width towards the larger height.\n- **Implementation**: Left and right pointers at the end of the array. Keep track of max area using min of left and right as height. Move right or left pointer towards the larger one. i.e. if left > right, move right. if right > left, move left.\n",
        "published": true
    },
    "valid-parentheses": {
        "id": "valid-parentheses",
        "title": "20. Valid Parentheses",
        "directory": "20-valid-parentheses",
        "difficulty": "Easy",
        "tags": [
            "stack"
        ],
        "notes": "- **Intuition**: Every opening bracket should eventually have a closing bracket that comes after it.\n- **Implementation**: Use a stack and a map that maps opening brackets to closing, when seeing an opening bracket, push the closing bracket to the stack, When seeing a closing bracket, check the top of the stack, if its the same, pop and keep going, otherwise return `False`.\n- **Edge-cases**: At the end, check the stack should be empty (unclosed brackets at the end). Also check if the stack is empty on seeing a closing bracket, return `False` there was no corresponding open.\n",
        "published": true
    },
    "min-stack": {
        "id": "min-stack",
        "title": "155. Min Stack",
        "directory": "155-min-stack",
        "difficulty": "Medium",
        "tags": [
            "stack"
        ],
        "notes": "- **Intuition**: Use two stacks, one to track the min values and one for the actual stack\n- **Implementation**: Initialize two stacks. `getMin` gets the top of the min stack if it has elements, otherwise top of main stack. `top` gets the top of the main stack always. `push` will always push to main stack, checks if the number is less than or equal to the min or if the stack is empty and pushes to the min stack, `pop` will check if the current top is equal to the min, pop from min stack, always pop from main stack after.\n",
        "published": true
    },
    "evaluate-reverse-polish-notation": {
        "id": "evaluate-reverse-polish-notation",
        "title": "150. Evaluate Reverse Polish Notation",
        "directory": "150-evaluate-reverse-polish-notation",
        "difficulty": "Medium",
        "tags": [
            "stack",
            "math"
        ],
        "notes": "- **Intuition**: In RPN, every operator operates on the last two elements while ensuring the results of all operations are continously updated.\n- **Implementation**: Use a stack, whenever a number is seen, add to stack. When an operator seen, pop the last 2 and operate on them, push the result back to the stack and keep going. Return top of stack at the end.\n- **Edge-cases**: In Python, integer division (`a // b`) does not truncate to zero, use `int(b / a)`. Remember order for division and subtraction matter, its `b - a` and `int(b / a)`.\n",
        "published": true
    },
    "generate-parentheses": {
        "id": "generate-parentheses",
        "title": "22. Generate Parentheses",
        "directory": "22-generate-parentheses",
        "difficulty": "Medium",
        "tags": [
            "stack",
            "recursion"
        ],
        "notes": "- **Intuition**:\n- **Implementation**:\n- **Edge-cases**:",
        "published": true
    }
}